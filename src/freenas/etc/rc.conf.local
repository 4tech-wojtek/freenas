#!/bin/sh
# THIS FILE IS RESERVED FOR THE EXCLUSIVE USE OF FREENAS CONFIG SYSTEM.
# Please edit /etc/rc.conf instead.

#-
# Copyright (c) 2010, 2011 iXsystems, Inc., All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL Jordan Hubbard OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

. /etc/rc.freenas

# _bool_config /variable/ /table/ /field/
_bool_config()
{
	local IFS=\|
	local boolvalue value key
	if [ -n "$4" ]; then
		key="$4"
	else
		key="id"
	fi
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT $3 FROM $2 ORDER BY ${key} DESC LIMIT 1" | \
	while read boolvalue; do
		if [ "${boolvalue}" = "1" ]; then
			value="YES"
		else
			value="NO"
		fi
		echo $1=\"${value}\"
	done
}

# _count_config /variable/ /table/ /field/ /where/
_count_config()
{
	local count value
	count=`${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT COUNT($3) FROM $2 WHERE $3$4"`
	if [ "${count}" -gt "0" ]; then
		value="YES"
	else
		value="NO"
	fi
	echo $1=\"${value}\"
}

# _bool_svcconfig /variable/ /service_name/
_bool_svcconfig()
{
	local IFS=\|
	local boolvalue value
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT srv_enable FROM services_services WHERE srv_service='$2' ORDER BY id DESC LIMIT 1" | \
	while read boolvalue; do
		if [ "${boolvalue}" = "1" ]; then
			value="YES"
		else
			value="NO"
		fi
		echo $1=\"${value}\"
	done
}

_nis_config() {
	local IFS=\|
	local nisdomain nisservers nissecure nismanycast

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT nis_domain, nis_servers, nis_secure_mode, nis_manycast FROM directoryservice_nis;" | \
	while read -r nisdomain nisservers nissecure nismanycast; do
		local nisflags="-S ${nisdomain}"

		echo "nisdomainname=\"${nisdomain}\""
		echo "nis_client_enable=\"YES\""

		if [ -n "${nisservers}" ]; then
			nisflags="${nisflags},${nisservers}"
		fi
		if [ "${nissecure}" = "1" ]; then
			nisflags="${nisflags} -s"
		fi
		if [ "${nismanycast}" = "1" ]; then
			nisflags="${nisflags} -m"
		fi

		echo "nis_client_flags=\"${nisflags}\""
	done
}

_nut_config() {
	local IFS=\|
	local boolvalue ups_identifier ups_mode ups_remotehost ups_remoteport
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT srv_enable FROM services_services WHERE srv_service='ups' AND srv_enable = 1 LIMIT 1" | \
	while read boolvalue; do
		${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT ups_mode, ups_remotehost, ups_remoteport, ups_identifier FROM services_ups" | \
		while read -r ups_mode ups_remotehost ups_remoteport ups_identifier; do
			if [ "${ups_mode}" = "master" ]; then
				echo "nut_enable=\"YES\""
				echo "nut_upslog_ups=\"${ups_identifier}\""
			else
				echo "nut_upslog_ups=\"${ups_identifier}@${ups_remotehost}:${ups_remoteport}\""
			fi
			echo "nut_upslog_enable=\"YES\""
			echo "nut_upsmon_enable=\"YES\""
		done
	done
}

_sssd_config()
{
	sssd_enable="NO"
	if dirsrv_enabled ldap ; then
		sssd_enable="YES"
	fi
	if dirsrv_enabled activedirectory; then
		local ad_unix=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
			SELECT
				ad_unix_extensions
			FROM
				directoryservice_activedirectory
			ORDER BY
				-id
			LIMIT 1
		")
		if [ "${ad_unix}" = "1" ]; then
			sssd_enable="YES"
		fi
	fi
	echo "sssd_enable=\"${sssd_enable}\""
}

_gen_conf()
{
	## Daemons
	_bool_svcconfig proftpd_enable ftp
	_bool_svcconfig nfs_server_enable nfs
	_bool_svcconfig rpc_lockd_enable nfs
	_bool_svcconfig rpc_statd_enable nfs
	_bool_svcconfig mountd_enable nfs
	_bool_svcconfig nfsd_enable nfs
	_bool_svcconfig nfsuserd_enable nfs
	_bool_svcconfig gssd_enable nfs
	_bool_svcconfig rsyncd_enable rsync
	_bool_svcconfig snmpd_enable snmp
	_bool_svcconfig sshd_enable ssh
	_bool_svcconfig inetd_enable tftp
	_bool_svcconfig smartd_enable smartd
	_bool_svcconfig ladvd_enable lldp
	_bool_svcconfig ctld_enable iscsitarget
	_bool_svcconfig apache24_enable webdav


	if dirsrv_enabled nis; then
		_nis_config
	fi

	if srv_enabled snmp; then
		echo "snmpd_conffile=\"/etc/local/snmpd.conf\""
		echo "snmpd_flags=\"-Ls5d\""
	fi

	_sssd_config
	_nut_config

	# Workaround: we don't enable ZFS by default but still want /etc/zfs/exports
	# be exist for mountd(8)
	if [ ! -r /etc/zfs/exports ]; then
		touch /etc/zfs/exports
	fi

	if [ "$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT nfs_srv_v4 FROM services_nfs")" = 1 -a "$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT srv_enable from services_services WHERE srv_service = 'nfs'")" = 1 ]; then
		echo "nfsv4_server_enable=\"YES\""
        else
		echo "nfsv4_server_enable=\"NO\""
	fi

	_count_config zfs_enable storage_volume vol_fstype =\'ZFS\'
	if ! is_freenas; then
		_count_config pf_enable system_failover id \>0
		_count_config failover_enable system_failover id \>0
		local failover="$(/usr/local/bin/python /usr/local/www/freenasUI/middleware/notifier.py failover_status 2> /dev/null)"
		if [ "${failover}" == "BACKUP" ]; then
			echo "collectd_enable=\"NO\""
		fi
	fi


	local nonroot mountdflags="-l -rS" ip nfsips mountdport statdport lockdport

	nfsips=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT nfs_srv_bindip FROM services_nfs ORDER BY -id LIMIT 1" | tr "," \\n | \
	while read -r ip; do
		if [ -n "${ip}" ]; then
			echo -n "-h ${ip} "
		fi
	done)

	# set NFS server options
	local IFS=\|
	local numservers nfsudp
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT nfs_srv_servers, nfs_srv_udp FROM services_nfs ORDER BY id DESC LIMIT 1" | \
	while read numservers nfsudp; do
		if [ ${nfsudp} = 0 ]; then
			echo "nfs_server_flags=\"-t -n ${numservers} ${nfsips}\""
		else
			echo "nfs_server_flags=\"-t -u -n ${numservers} ${nfsips}\""
		fi
	done

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT nfs_srv_allow_nonroot, nfs_srv_mountd_port, nfs_srv_rpcstatd_port, nfs_srv_rpclockd_port FROM services_nfs ORDER BY -id LIMIT 1" | \
	while read -r nonroot mountdport statdport lockdport; do
		if [ "${nonroot}" = 1 ]; then
			mountdflags="${mountdflags}n"
		fi
		if [ -n "${mountdport}" ]; then
			mountdflags="${mountdflags} -p ${mountdport}"
		fi
		if [ -n "${statdport}" ]; then
			statdport="-p ${statdport}"
		fi
		if [ -n "${lockdport}" ]; then
			lockdport="-p ${lockdport}"
		fi
		if [ -n "${nfsips}" ]; then
			mountdflags="${mountdflags} ${nfsips}"
			echo "rpcbind_flags=\"${nfsips}\""
		fi
		echo "rpc_statd_flags=\"${nfsips}${statdport}\""
		echo "rpc_lockd_flags=\"${nfsips}${lockdport}\""
		echo "mountd_flags=\"${mountdflags}\""
	done

	local smartdint
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT smart_interval FROM services_smart ORDER BY id DESC LIMIT 1" | \
	while read smartdint; do
		inter=$(echo "${smartdint}*60"|/usr/bin/bc)
		echo "smartd_flags=\"-i ${inter}\""
	done

	echo "geli_devices=\"`${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT encrypted_provider FROM storage_encrypteddisk e JOIN storage_volume v ON e.encrypted_volume_id = v.id WHERE v.vol_encrypt=1;" | \
		tr \\\n \  `\""
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT e.encrypted_provider,v.vol_encryptkey FROM storage_encrypteddisk e JOIN storage_volume v ON e.encrypted_volume_id = v.id WHERE v.vol_encrypt=1;" | \
	while read -r provider key; do
		_provider=`echo ${provider}|tr '/-' '_'`
		echo "geli_${_provider}_flags=\"-p -k /data/geli/${key}.key\""
	done

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT lldp_intdesc, lldp_country, lldp_location FROM services_lldp ORDER BY -id LIMIT 1" | \
	while read -r lldp_intdesc lldp_country lldp_location; do
		echo -n "ladvd_flags=\"-a"
		[ ${lldp_intdesc} = 1 ] && echo -n " -z"
		[ -n "${lldp_country}" ] && echo -n " -c ${lldp_country}"
		[ -n "${lldp_location}" ] && echo -n " -l \\\"${lldp_location}\\\""
		echo "\""
	done

	if is_freenas; then
		echo "ataidle_enable=\"YES\""
		# Needed to use pbi repositories
		echo "pbid_enable=\"YES\""
		echo "vboxnet_enable=\"YES\""
		# Bug #7337 -- blacklist AMD systems for now
		if /sbin/sysctl hw.model | grep -q AMD; then
			echo "watchdogd_enable=\"NO\""
		else
			echo "watchdogd_enable=\"YES\""
		fi
	else
		echo "ataidle_enable=\"NO\""
		echo "watchdogd_enable=\"NO\""
	fi

	#FIXME: it may happen too early on boot
	# tunable RC is not marked as broken
	#local tun_var tun_value tun_enabled
        #/usr/local/sbin/dsutil query tunables 'type = RC' | while read line; do
	#	_tmp=$(echo $line|/usr/local/bin/jq ".var")
        #        tun_var=$(eval echo $_tmp)
	#	_tmp=$(echo $line|/usr/local/bin/jq ".value")
        #        tun_value=$(eval echo $_tmp)
	#	_tmp=$(echo $line|/usr/local/bin/jq ".enabled")
        #        tun_enabled=$(eval echo $_tmp)
	#	if [ "${tun_enable}" = "null" -o "${tun_enabled}" = "false" ]; then
	#		continue
	#	fi
	#	echo "${tun_var}=\"${tun_value}\""
	#done
}

# Regenerate stale caches of rc.conf data.  We run multiple time
# as part of the boot process, and this helps.  It also provides
# a useful file to look at for debugging.
#
# Previously mtime was being used to invalidate the cache
# However this solution could not deal with backward date changes
_NEWSUM=$(md5 -q ${FREENAS_CONFIG})
_OLDSUM=$(cat ${FREENAS_CONFIG_MD5} 2> /dev/null)
if [ ! "${_NEWSUM}" = "${_OLDSUM}" -a ! -f "${NEED_UPDATE_SENTINEL}" ]; then
	_gen_conf > ${FREENAS_RC}
	echo ${_NEWSUM} > ${FREENAS_CONFIG_MD5}
fi

if [ -f ${FREENAS_RC} ]; then
	. ${FREENAS_RC}
fi
