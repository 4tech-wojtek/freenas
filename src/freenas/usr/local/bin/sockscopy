#!/usr/local/bin/python

from __future__ import print_function

import os
import sys
import time
import signal
import atexit
import traceback
import asyncore
import socket
import threading
import json
import errno
import logging
from subprocess import Popen, PIPE, call
from tempfile import NamedTemporaryFile

sys.path.extend([
    '/usr/local/www',
    '/usr/local/www/freenasUI'
])

os.environ["DJANGO_SETTINGS_MODULE"] = "freenasUI.settings"

import django
django.setup()

from common.system import (
    mount,
    umount,
    is_mounted,
)
from freenasUI.common.log import log_traceback


log = logging.getLogger('sockscopy')

# Global Variables
QUIT_FLAG = threading.Event()  # Termination Event
RSYNC_CMD = '/usr/local/bin/rsync'  # Location of rsync binary
# The temp. src directory to mount the disk to
src = '/var/run/importcopy/tmpdir/'
data_lock = threading.Lock()
# Dictinoary containing information (File currently being copied,
# Progress info, State: mounting, copying,  unmounting, done
# Volume being imported.
global data_dict

data_dict = {
    'ftrans': '/ ',
    'percent': 0,
    'status': 'Mounting',
    'volume': None,
    'error': None,
    'stdout_file': None,
    'traceback': None
}


def signal_handler(signal, frame):
    QUIT_FLAG.set()

signal.signal(signal.SIGINT, signal_handler)


def sub_kill(pname=None, thread=None, ):
    global data_dict
    with data_lock:
        tmp_data = data_dict
    if thread:
        thread.stop()
    # Repeating socket deletion logic here for extra safety
    if os.path.exists(socket_path):
        os.unlink(socket_path)
    if pname and pname.poll() is None:
        os.kill(pname.pid, signal.SIGTERM)
    if os.path.isdir(src):
        try:
            if is_mounted(device=tmp_data['volume'], path=src[:-1]):
                umount(src, True)
                os.rmdir(src)
            else:
                os.rmdir(src)
        except ValueError as e:
            # This ValueError here is most likely thrown by
            # freenasUI.common.system's mount mehtod
            # where the error string is i18n hence do the below
            # gymnastics to get back a normal string
            log.error('Error occured whilst unmounting {0}: {1}'.format(
                tmp_data["volume"],
                e.message + " "
            ))
        except Exception as e:
            log_traceback(log=log)
    if data_dict['error']:
        sys.exit(1)
    sys.exit(0)


class testhandler(asyncore.dispatcher_with_send):

    def __init__(self, sock, addr):
        asyncore.dispatcher_with_send.__init__(self, sock)
        self.addr = addr
        self.buffer = ''

    def handle_read(self):
        global data_dict
        with data_lock:
            tmp_data = data_dict
        a = self.recv(8192)
        if a.startswith(b'get_progress'):
            self.buffer = json.dumps(tmp_data).encode('utf8')
        elif a.startswith(b'stop'):
            raise asyncore.ExitNow(
                'User Terminated Import of Volume: {0}'.format(tmp_data['volume'])
            )
        elif a.startswith(b'done'):
            raise asyncore.ExitNow(
                'Import of Volume: {0} Successfully Done'.format(tmp_data['volume'])
            )

    def writable(self):
        return (len(self.buffer) > 0)

    def handle_write(self):
        self.socket.sendall(self.buffer)
        self.buffer = b''

    def handle_close(self):
        self.close()


class testselect(asyncore.dispatcher):

    def __init__(self, path):
        asyncore.dispatcher.__init__(self)
        self.path = path
        self.create_socket(socket.AF_UNIX, socket.SOCK_STREAM)
        self.set_reuse_addr()
        try:
            self.bind(self.path)
        except socket.error as serr:
            if serr.errno != errno.EADDRINUSE:
                raise serr
            # Delete socket if it prexists when we try to bind
            os.unlink(self.path)
            self.bind(self.path)
        self.listen(5)

    def handle_accept(self):
        client = self.accept()
        if client is None:
            pass
        else:
            handler = testhandler(*client)


class Loop_Sockserver(threading.Thread):

    def __init__(self, socket_path):
        super(Loop_Sockserver, self).__init__()
        self.daemon = True
        self.obj = testselect(socket_path)

    def run(self):
        try:
            asyncore.loop()
        except asyncore.ExitNow as e:
            log.debug(str(e))
        except Exception as e:
            log_traceback(log=log)
        finally:
            if os.path.exists(self.obj.path):
                os.unlink(self.obj.path)
            QUIT_FLAG.set()

    def stop(self):
        self.obj.close()
        self.join()


def usage():
    print(
        'Usage: {0} vol_to_import fs_type dest_path socket_path'.format(sys.argv[0]),
        file=sys.stderr
    )
    sys.exit(1)


# Main Code starts here
if __name__ == '__main__':
    if len(sys.argv) < 5:
        usage()
    # Note no need to use data_lock as yet coz we have not spawned threads
    data_dict['volume'] = sys.argv[1]
    fstype = sys.argv[2]
    dest = sys.argv[3]
    socket_path = sys.argv[4]
    proc_stdout = None
    proc_stdout_orig = None
    rsync_proc = None
    try:
        atexit.register(sub_kill)
        os.makedirs(src)
        loop_thread = Loop_Sockserver(socket_path)
        loop_thread.start()
        if fstype == 'ntfs':
            call('kldload fuse >/dev/null 2>&1', shell=True)
            if call('kldstat -n fuse >/dev/null 2>&1', shell=True) != 0:
                raise Exception('Fuse (kernel module) failed to load')
        with data_lock:
            try:
                mount(data_dict["volume"], src, 'ro', fstype)
            except ValueError as e:
                # This ValueError here is most likely thrown by
                # freenasUI.common.system's mount mehtod
                # where the error string is i18n hence do the below
                # gymnastics to get back a normal string
                raise ValueError(
                    'Error occured whilst mounting {0} as {1} filesystem. Error {2}'.format(
                        data_dict["volume"],
                        fstype,
                        str(e) + " ")
                )

        proc_stdout_orig = NamedTemporaryFile(mode="wb", buffering=0, delete=False)
        # Note: Duplicating this in read only mode to properly read from it even
        # whilst it is being written to
        # If you happen to come across this and know of a better solution then fix
        data_dict['stdout_file'] = proc_stdout_orig.name
        proc_stdout = open(proc_stdout_orig.name, 'rb', buffering=0)

        line = [
            RSYNC_CMD,
            '--info=progress2',
            '--modify-window=1',
            '-rltvh',
            '--no-perms',
            src,
            dest
        ]
        rsync_proc = Popen(
            line, stdout=proc_stdout_orig.fileno(), stderr=PIPE, bufsize=0, preexec_fn=os.setsid
        )
        op_byte = None
        abspos = 0
        proc_stdout.seek(0)
        proc_output = ''

        with data_lock:
            data_dict['status'] = 'importing'
        atexit._exithandlers = []
        atexit.register(sub_kill, rsync_proc, loop_thread)

        while rsync_proc.poll() is None:
            if QUIT_FLAG.wait(0.01):
                rsync_proc.terminate()
                raise Exception('A terminate instruction was sent to the program')
            try:
                # Just in case something wrote to the file in the interim seek back to this
                proc_stdout.seek(abspos)
                op_byte = proc_stdout.read(1).decode('utf8')
                if op_byte == '':
                    # Sleep for a bit instead of buz looping till the file has more content
                    # added to it
                    time.sleep(0.1)
                    continue
                abspos += 1
                if op_byte in ['\n', '\r']:
                    proc_output = proc_output.strip()
                    if proc_output:
                        # print('the whole output is: {0}'.format(proc_output))
                        prog_out = proc_output.split(' ')
                        progress = [x for x in prog_out if '%' in x]
                        if len(progress):
                            with data_lock:
                                data_dict['percent'] = int(progress[0][:-1])
                            # print('this is percentage: {0}'.format(progress[0][:-1]))
                        elif not proc_output.endswith('/'):
                            if (
                                len(prog_out) == 1 or
                                (
                                    proc_output not in ['sending incremental file list'] and
                                    'xfr#' not in proc_output
                                )
                            ):
                                with data_lock:
                                    data_dict['ftrans'] = proc_output
                                # print('this is message: {0}'.format(proc_output))
                        proc_output = ''
                else:
                    proc_output += op_byte
            except Exception as e:
                    # Catch IOERROR Errno 9 which usually arises because
                    # of already closed fileobject being used here therby
                    # raising Bad File Descriptor error. In this case continue
                    # while loop will check for rsync_proc.poll() to be None
                    # or not and DTRT
                    if hasattr(e, 'errno') and e.errno == 9:
                        continue
                    log.warn('Parsing error in rsync task: {0}'.format(str(e)))
                    log_traceback(log=log)
        with data_lock:
            data_dict['ftrans'] = '/ '
            data_dict['status'] = 'unmounting'
    except Exception as e:
        with data_lock:
            data_dict['error'] = str(e)
            if sys.exc_info()[0]:
                data_dict['traceback'] = traceback.format_exc()
            data_dict['status'] = 'error'
            log.error('Import of Volume {0} encoutered the following error {1}'.format(
                data_dict['volume'], data_dict['error']
            ))
            log_traceback(log=log)

    # We do not raise an error here as the atexit registered function
    # will (force) take care of these and hence no need to inform the
    # user of an error
    try:
        if os.path.isdir(src):
            if is_mounted(device=data_dict['volume'], path=src[:-1]):
                umount(src)
            os.rmdir(src)
        if fstype == 'ntfs':
            call('kldunload fuse >/dev/null 2>&1', shell=True)
    except ValueError as e:
        # This is mostly an unmount error and we choose to not log it
        # as we will try to unmount again at the exit of this program
        with data_lock:
            log.debug('Error occured whilst unmounting {0} will retry unmounting at exit'.format(
                data_dict["volume"]
            ))
    except Exception as e:
        log_traceback(log=log)
    with data_lock:
        if rsync_proc and rsync_proc.poll() != 0:
            data_dict['status'] = 'error'
            data_dict['error'] = rsync_proc.stderr.read()
        elif rsync_proc is not None:
            data_dict['percent'] = 100
            data_dict['status'] = 'finished'
    if proc_stdout:
        proc_stdout.close()

    loop_thread.join()
