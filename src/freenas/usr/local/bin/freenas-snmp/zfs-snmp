#!/usr/local/bin/python
# Copyright (c) 2012, Jakob Borg
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * The name of the author may not be used to endorse or promote products
#      derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY JAKOB BORG ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL JAKOB BORG BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.
# Initial code taken from: https://github.com/jm66/solaris-extra-snmp

import sys
import commands
import os
import re
import snmpresponse
import subprocess
import json
import socket


sys.path.append("/usr/local/www")

from freenasUI.tools.arc_summary import get_Kstat, get_arc_efficiency

BASE_OID = '.1.3.6.1.4.1.25359.1'
ARC = get_arc_efficiency(get_Kstat())
ZILSOCK = '/var/run/zilstatd.sock'

size_dict = {"K": 1024,
             "M": 1048576,
             "G": 1073741824,
             "T": 1099511627776}


# Method to convert 1K --> 1024 and so on
def unprettyprint(ster):
    num = 0.0
    try:
        num = float(ster)
    except:
        try:
            num = float(ster[:-1]) * size_dict[ster[-1]]
        except:
            pass
    return long(num)


# Method to parse zpool iostat
def zpool_iostat(name=None):
    zfsproc = subprocess.Popen([
        'zpool',
        'iostat',
        ] + ([name] if name else []),
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )

    output = zfsproc.communicate()[0].strip('\n')

    rv = {}
    o1 = output.split('\n')[3:]
    for line in o1:
        data = line.split()
        attrs = {
             'pool': data[0],
             'alloc': unprettyprint(data[1]),
             'free': unprettyprint(data[2]),
             'opread': unprettyprint(data[3]),
             'opwrite': unprettyprint(data[4]),
             'bwread': unprettyprint(data[5]),
             'bwrite': unprettyprint(data[6]),
             }
        rv[attrs['pool']] = attrs

    if name:
        return rv[name]
    return rv


def kstat(name):
    output = commands.getoutput("sysctl kstat." + name)
    try:
        return int(re.split("\s+", output)[1])
    except:
        return 0


def zfs_arc_size(oid):
    # KB
    return ('gauge', kstat("zfs.misc.arcstats.size") / 1024)


def zfs_arc_data(oid):
    # KB
    return ('gauge', kstat("zfs.misc.arcstats.data_size") / 1024)


def zfs_arc_meta(oid):
    # KB
    return ('gauge', kstat("zfs.misc.arcstats.arc_meta_used") / 1024)


def zfs_arc_hits(oid):
    # 32 bit counter
    return ('counter', kstat("zfs.misc.arcstats.hits") % 2**32)


def zfs_arc_misses(oid):
    # 32 bit counter
    return ('counter', kstat("zfs.misc.arcstats.misses") % 2**32)


def zfs_arc_miss_percent(oid):
    # percentage (floating point precision wrapped as a string)
    arc_hits = kstat("zfs.misc.arcstats.hits")
    arc_misses = kstat("zfs.misc.arcstats.misses")
    arc_read = arc_hits + arc_misses
    if (arc_read > 0):
        hit_percent = float(100 * arc_hits/arc_read)
        miss_percent = 100 - hit_percent
        return ('string', str(miss_percent))
    return ('string', "0")


def zfs_arc_c(oid):
    # KB
    return ('gauge', kstat("zfs.misc.arcstats.c") / 1024)


def zfs_arc_p(oid):
    # KB
    return ('gauge', kstat("zfs.misc.arcstats.p") / 1024)


def zfs_arc_cache_hit_ratio(oid):
    # percentage (floating point precision wrapped as a string)
    return ('string',  ARC['cache_hit_ratio']['per'][:-1])


def zfs_arc_cache_miss_ratio(oid):
    # percentage (floating point precision wrapped as a string)
    return ('string',  ARC['cache_miss_ratio']['per'][:-1])


def zilstatd_ops(interval):
    if os.path.exists(ZILSOCK):
        try:
            s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
            s.connect(ZILSOCK)
            s.send("get_"+str(interval)+"_second_interval")
            data = json.loads(s.recv(1024))
            s.close()
            if data:
                return long(float(data["ops"]))
        except socket.error:
            pass
        return long(0)


def zfs_zilstat_ops1(oid):
    return ('counter64', zilstatd_ops(1))


def zfs_zilstat_ops5(oid):
    return ('counter64', zilstatd_ops(5))


def zfs_zilstat_ops10(oid):
    return ('counter64', zilstatd_ops(10))


# def zfs_read(oid):
    # 32 bit KB counter
    # return ('counter',
    #     kstat(".zfs.misc.arcstats.l2_read_bytes") / 1024 % 2**32)


# def zfs_readdir(oid):
    # 32 bit KB counter
    # return ('counter',
    #     kstat("unix:0:vopstats_zfs:readdir_bytes") / 1024 % 2**32)


# def zfs_write(oid):
    # 32 bit KB counter
    # return ('counter',
    #     kstat(".zfs.misc.arcstats.l2_write_bytes") / 1024 % 2**32)

def zfs_l2arc_size(oid):
    # KB
    return ('gauge', kstat("kstat.zfs.misc.arcstats.l2_size") / 1024)


def zfs_l2arc_hits(oid):
    # 32 bit counter
    return ('counter',
            kstat("zfs.misc.arcstats.l2_hits") % 2**32)


def zfs_l2arc_misses(oid):
    # 32 bit counter
    return ('counter',
            kstat("zfs.misc.arcstats.l2_misses") % 2**32)


def zfs_l2arc_write(oid):
    # 32 bit KB counter
    return ('counter',
            kstat("zfs.misc.arcstats.l2_write_bytes") / 1024 % 2**32)


def zfs_l2arc_read(oid):
    # 32 bit KB counter
    return ('counter',
            kstat("zfs.misc.arcstats.l2_read_bytes") / 1024 % 2**32)


def zfs_pools():
    statuses = {"ONLINE": 1, "DEGRADED": 2, "FAULTED": 3}
    pools = [re.split('\s+', line)
             for line in commands.getoutput(
                "zpool list -H -o name,health").split("\n")]
    pools = [(row[0], statuses.get(row[1], 4)) for row in pools]
    return pools


def zfs_used_avail(fs):
    return [int(x) / 1024
            for x in commands.getoutput(
                "zfs get -Hpo value used,available " + fs).split("\n")]


def zfs_used(fs, divisor=1):
    return ('gauge', zfs_used_avail(fs)[0] / divisor)


def zfs_avail(fs, divisor=1):
    return ('gauge', zfs_used_avail(fs)[1] / divisor)


def zfs_size(fs, divisor=1):
    return ('gauge',
            (zfs_used_avail(fs)[0] + zfs_used_avail(fs)[1]) / divisor)


def zfs_vols():
    vols = [re.split('\s+', line)
            for line in commands.getoutput(
                "zfs list -H -t volume").split("\n")]
    vols = [(row[0]) for row in vols]
    return vols

# nymnetworks     OBJECT IDENTIFIER ::= {enterprises 25359}
# zfs             OBJECT IDENTIFIER ::= {nymnetworks 1}
# fs              OBJECT IDENTIFIER ::= {zfs 1}
# arc             OBJECT IDENTIFIER ::= {zfs 2}
# l2arc           OBJECT IDENTIFIER ::= {zfs 3}
# io              OBJECT IDENTIFIER ::= {zfs 4}
# vols            OBJECT IDENTIFIER ::= {zfs 5}
# zil             OBJECT IDENTIFIER ::= {zfs 6}


result = [
    (BASE_OID + '.2.1.0', zfs_arc_size),
    (BASE_OID + '.2.2.0', zfs_arc_meta),
    (BASE_OID + '.2.3.0', zfs_arc_data),
    (BASE_OID + '.2.4.0', zfs_arc_hits),
    (BASE_OID + '.2.5.0', zfs_arc_misses),
    (BASE_OID + '.2.6.0', zfs_arc_c),
    (BASE_OID + '.2.7.0', zfs_arc_p),
    (BASE_OID + '.2.8.0', zfs_arc_miss_percent),
    (BASE_OID + '.2.9.0', zfs_arc_cache_hit_ratio),
    (BASE_OID + '.2.10.0', zfs_arc_cache_miss_ratio),

    (BASE_OID + '.3.1.0', zfs_l2arc_hits),
    (BASE_OID + '.3.2.0', zfs_l2arc_misses),
    (BASE_OID + '.3.3.0', zfs_l2arc_read),
    (BASE_OID + '.3.4.0', zfs_l2arc_write),
    (BASE_OID + '.3.5.0', zfs_l2arc_size),

    (BASE_OID + '.6.1.0', zfs_zilstat_ops1),
    (BASE_OID + '.6.2.0', zfs_zilstat_ops5),
    (BASE_OID + '.6.3.0', zfs_zilstat_ops10),
    # (BASE_OID + '.4.1.0', zfs_read),
    # (BASE_OID + '.4.2.0', zfs_readdir),
    # (BASE_OID + '.4.3.0', zfs_write),
]

i = 1
all_iostat = zpool_iostat()
for pool, health in zfs_pools():
    iostat = all_iostat[pool]
    result.append((BASE_OID + '.1.1.' + str(i), ('string', pool)))
    result.append((BASE_OID + '.1.2.' + str(i),
                   lambda oid, fs=pool: zfs_avail(fs)))
    result.append((BASE_OID + '.1.3.' + str(i),
                   lambda oid, fs=pool: zfs_used(fs)))
    result.append((BASE_OID + '.1.4.' + str(i), ('integer', health)))
    result.append((BASE_OID + '.1.5.' + str(i),
                   lambda oid, fs=pool: zfs_size(fs)))
    result.append((BASE_OID + '.1.12.' + str(i),
                   lambda oid, fs=pool: zfs_avail(fs, 1024)))
    result.append((BASE_OID + '.1.13.' + str(i),
                   lambda oid, fs=pool: zfs_used(fs, 1024)))
    result.append((BASE_OID + '.1.14.' + str(i),
                   lambda oid, fs=pool: zfs_size(fs, 1024)))
    result.append((BASE_OID + '.1.15.' + str(i),
                   lambda oid, fs=pool: ('counter64',
                                         iostat['opread'])))
    result.append((BASE_OID + '.1.16.' + str(i),
                   lambda oid, fs=pool: ('counter64',
                                         iostat['opwrite'])))
    result.append((BASE_OID + '.1.17.' + str(i),
                   lambda oid, fs=pool: ('counter64',
                                         iostat['bwread'])))
    result.append((BASE_OID + '.1.18.' + str(i),
                   lambda oid, fs=pool: ('counter64',
                                         iostat['bwrite'])))
    i += 1

i = 1
if zfs_vols()[0] != '':
    for vol in zfs_vols():
        result.append((BASE_OID + '.5.1.' + str(i), ('string', vol)))
        result.append((BASE_OID + '.5.2.' + str(i),
                       lambda oid, fs=vol: zfs_avail(fs)))
        result.append((BASE_OID + '.5.3.' + str(i),
                       lambda oid, fs=vol: zfs_used(fs)))
        result.append((BASE_OID + '.5.4.' + str(i),
                       lambda oid, fs=vol: zfs_size(fs)))
        result.append((BASE_OID + '.5.12.' + str(i),
                       lambda oid, fs=vol: zfs_avail(fs, 1024)))
        result.append((BASE_OID + '.5.13.' + str(i),
                       lambda oid, fs=vol: zfs_used(fs, 1024)))
        result.append((BASE_OID + '.5.14.' + str(i),
                       lambda oid, fs=vol: zfs_size(fs, 1024)))
        i += 1

operation = sys.argv[1]
req_oid = sys.argv[2]

snmpresponse.respond_to(operation, req_oid, result)
