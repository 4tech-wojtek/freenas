diff -Naur audio/firefly/Makefile audio/firefly/Makefile
--- audio/firefly/Makefile	2011-06-21 13:44:12.000000000 -0700
+++ audio/firefly/Makefile	2011-12-31 08:27:49.000000000 -0800
@@ -1,12 +1,12 @@
 # New ports collection makefile for:	mt-daapd-devel
 # Date created:				26 Nov 2007
 # Whom:					Mark Foster <mark@foster.cc>
-# $FreeBSD: ports/audio/firefly/Makefile,v 1.7 2011/06/21 20:44:12 crees Exp $
+# $FreeBSD: ports/audio/firefly/Makefile,v 1.10 2011/12/31 16:27:49 rm Exp $
 #
 
 PORTNAME=	firefly
 PORTVERSION=	1696
-PORTREVISION=	4
+PORTREVISION=	6
 CATEGORIES=	audio
 MASTER_SITES=	http://nightlies.fireflymediaserver.org/nightlies/svn-${PORTVERSION}/ \
 		http://www.magnesium.net/~mdf/distfiles/
@@ -15,6 +15,8 @@
 MAINTAINER=	mark@foster.cc
 COMMENT=	Open-source media server for the Roku SoundBridge and iTunes
 
+LICENSE=	GPLv2
+
 BUILD_DEPENDS=	${LOCALBASE}/include/vorbis/codec.h:${PORTSDIR}/audio/libvorbis \
 		${LOCALBASE}/include/FLAC/metadata.h:${PORTSDIR}/audio/flac
 RUN_DEPENDS=	oggdec:${PORTSDIR}/audio/vorbis-tools \
@@ -23,13 +25,11 @@
 		sqlite3.8:${PORTSDIR}/databases/sqlite3 \
 		id3tag.0:${PORTSDIR}/audio/libid3tag
 
-CONFLICTS=	mt-daapd-0.2.*
-
 GNU_CONFIGURE=	yes
-CONFIGURE_ENV=	CFLAGS+="${PTHREAD_CFLAGS}" \
-		CPPFLAGS="${CPPFLAGS} -I${LOCALBASE}/include" \
-		LDFLAGS="-L${LOCALBASE}/lib" \
-		LIBS="-L${LOCALBASE}/lib ${PTHREAD_LIBS}"
+CONFIGURE_ENV=	LIBS="-L${LOCALBASE}/lib ${PTHREAD_LIBS}"
+CFLAGS+=	${PTHREAD_CFLAGS}
+CPPFLAGS+=	-I${LOCALBASE}/include
+LDFLAGS+=	-L${LOCALBASE}/lib
 CONFIGURE_TARGET=	--build=${MACHINE_ARCH}-portbld-freebsd${OSREL}
 CONFIGURE_ARGS=		--prefix=${PREFIX} --with-id3tag=${PREFIX} \
 			--enable-sqlite3 --enable-oggvorbis --enable-flac
@@ -45,15 +45,25 @@
 
 USE_LDCONFIG=	yes
 
+OPTIONS=	JAPANESE "Japanese support in ID3 tags" off
+
+.include <bsd.port.options.mk>
+
+.if defined(WITH_JAPANESE)
+EXTRA_PATCHES=	${FILESDIR}/extra-patch-src_scan-mp3.c
+USE_ICONV=	yes
+CONFIGURE_ARGS+=	--enable-iconv
+.endif
+
 pre-everything::
-	@${ECHO_CMD} "Define vars bellow if you need:"
+	@${ECHO_CMD} "Define vars below if you need:"
 	@${ECHO_CMD} "DAAPD_USER=${DAAPD_USER} (default: daapd)"
 	@${ECHO_CMD} "DAAPD_GROUP=${DAAPD_GROUP} (default: daapd)"
 	@${ECHO_CMD} "DAAPD_DBDIR=${DAAPD_DBDIR} (default: ${PREFIX}/var/db/${PORTNAME})"
 
 post-patch:
 	@${REINPLACE_CMD} -e 's|echo aout|echo elf|' \
-	    ${WRKSRC}/configure
+		${WRKSRC}/configure
 
 post-install:
 .if !defined(NOPORTDOCS)
diff -Naur audio/firefly/files/extra-patch-src_scan-mp3.c audio/firefly/files/extra-patch-src_scan-mp3.c
--- audio/firefly/files/extra-patch-src_scan-mp3.c	1969-12-31 16:00:00.000000000 -0800
+++ audio/firefly/files/extra-patch-src_scan-mp3.c	2011-12-31 08:27:49.000000000 -0800
@@ -0,0 +1,138 @@
+--- src/scan-mp3.c.orig	2007-09-25 16:55:23.000000000 +0900
++++ src/scan-mp3.c	2011-09-05 13:52:16.000000000 +0900
+@@ -18,6 +18,15 @@
+  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+  */
+
++#define USE_CP932
++
++#ifdef USE_CP932
++    #define UNKNOWN_STR    "UNKNOWN"
++    #ifndef FILESYSTEM_CES
++        #define FILESYSTEM_CES "CP932"
++    #endif
++#endif
++
+ #ifdef HAVE_CONFIG_H
+ #  include "config.h"
+ #endif
+@@ -34,6 +43,10 @@
+ #include <string.h>
+ #include <time.h>
+
++#ifdef USE_CP932
++    #include <iconv.h>
++#endif
++
+ #include "daapd.h"
+ #include "conf.h"
+ #include "err.h"
+@@ -289,6 +302,96 @@
+     return 1;
+ }
+
++#ifdef USE_CP932
++#define MAX_ICONV_BUF 1024
++
++typedef enum {
++    ICONV_OK,
++    ICONV_TRYNEXT,
++    ICONV_FATAL
++}   iconv_result;
++
++static iconv_result do_convert(const char* to_ces, const char* from_ces,
++                   char *inbuf,  size_t inbytesleft,
++                   char *outbuf_orig, size_t outbytesleft_orig) {
++    size_t rc;
++    iconv_result ret = ICONV_OK;
++
++    size_t outbytesleft = outbytesleft_orig - 1;
++    char* outbuf = outbuf_orig;
++
++    iconv_t cd  = iconv_open(to_ces, from_ces);
++    if (cd == (iconv_t)-1) {
++        return ICONV_FATAL;
++    }
++    rc = iconv(cd, &inbuf, &inbytesleft, &outbuf, &outbytesleft);
++    if (rc == (size_t)-1) {
++        if (errno == E2BIG) {
++            ret = ICONV_FATAL;
++        } else {
++            ret = ICONV_TRYNEXT;
++            memset(outbuf_orig, '\0', outbytesleft_orig);
++        }
++    }
++    iconv_close(cd);
++
++    return ret;
++}
++
++static unsigned char* get_utf8_text(const id3_ucs4_t* native_text) {
++    unsigned char* utf8_text = NULL;
++    char * in, * in8, * iconv_buf;
++    iconv_result rc;
++
++    in = (char*)id3_ucs4_latin1duplicate(native_text);
++    if (!in) goto out;
++
++    in8 = (char*)id3_ucs4_utf8duplicate(native_text);
++    if (!in8) {
++      free(in);
++      goto out;
++    }
++
++    iconv_buf = (char*)calloc(MAX_ICONV_BUF, sizeof(char));
++    if (!iconv_buf) {
++      free(in); free(in8);
++      goto out;
++    }
++
++    /* (1) try utf8 -> cp932 */
++    rc = do_convert("CP932", "UTF-8", in8, strlen(in8), iconv_buf, MAX_ICONV_BUF);
++    if (rc == ICONV_OK) {
++        utf8_text = (unsigned char*)in8;
++        free(iconv_buf);
++    } else if (rc == ICONV_TRYNEXT) {
++        /* (2) try cp932 -> utf8 */
++        rc = do_convert("UTF-8", "CP932", in, strlen(in), iconv_buf, MAX_ICONV_BUF);
++        if (rc == ICONV_OK) {
++            utf8_text = (unsigned char*)iconv_buf;
++        } else if (rc == ICONV_TRYNEXT) {
++            /* (3) try euc-jp -> utf8 */
++            rc = do_convert("UTF-8", "EUC-JP", in, strlen(in), iconv_buf, MAX_ICONV_BUF);
++            if (rc == ICONV_OK) {
++                utf8_text = (unsigned char*)iconv_buf;
++            } else if (rc == ICONV_TRYNEXT) {
++                /* utf-8 including non-japanese char? fallback. */
++                utf8_text = (unsigned char*)id3_ucs4_utf8duplicate(native_text);
++                free(iconv_buf);
++            }
++        }
++        free(in8);
++    }
++    free(in);
++
++  out:
++    if (!utf8_text) {
++        utf8_text = (unsigned char*)strdup(UNKNOWN_STR);
++    }
++
++    return utf8_text;
++}
++#endif
++
+ int scan_mp3_get_mp3tags(char *file, MP3FILE *pmp3) {
+     struct id3_file *pid3file;
+     struct id3_tag *pid3tag;
+@@ -352,8 +455,11 @@
+             if(native_text) {
+                 have_utf8=1;
+
+-
++#ifdef USE_CP932
++		utf8_text = (char *)get_utf8_text(native_text);
++#else
+                 utf8_text = (char*)id3_ucs4_utf8duplicate(native_text);
++#endif
+                 if(utf8_text)
+                     mem_register(utf8_text,0);
diff -Naur audio/firefly/files/mt-daapd.in audio/firefly/files/mt-daapd.in
--- audio/firefly/files/mt-daapd.in	2010-03-26 17:12:41.000000000 -0700
+++ audio/firefly/files/mt-daapd.in	2012-01-14 00:55:23.000000000 -0800
@@ -1,5 +1,5 @@
 #!/bin/sh
-# $FreeBSD: ports/audio/firefly/files/mt-daapd.in,v 1.3 2010/03/27 00:12:41 dougb Exp $
+# $FreeBSD: ports/audio/firefly/files/mt-daapd.in,v 1.4 2012/01/14 08:55:23 dougb Exp $
 
 # PROVIDE: firefly
 # REQUIRE: LOGIN
@@ -9,7 +9,7 @@
 : ${firefly_enable=NO}
 
 name="firefly"
-rcvar="`set_rcvar`"
+rcvar=firefly_enable
 
 command="%%PREFIX%%/sbin/mt-daapd"
 command_args="-c %%PREFIX%%/etc/mt-daapd.conf"
diff -Naur audio/firefly/files/patch-plugins_out-daap.c audio/firefly/files/patch-plugins_out-daap.c
--- audio/firefly/files/patch-plugins_out-daap.c	1969-12-31 16:00:00.000000000 -0800
+++ audio/firefly/files/patch-plugins_out-daap.c	2011-12-26 20:23:04.000000000 -0800
@@ -0,0 +1,24 @@
+--- src/plugins/out-daap.c   2007-10-13 15:10:06.000000000 -0700
++++ src/plugins/out-daap.c.new        2011-10-16 18:08:53.207764000 -0700
+@@ -1392,11 +1393,9 @@
+
+     size = sizeof(servername);
+     pi_server_name(servername,&size);
+-    //    supports_update = conf_get_int("daap","supports_update",1);
++    supports_update = pi_conf_get_int("daap","supports_update",1);
+
+     actual_length=139 + (int) strlen(servername);
+-    if(!supports_update)
+-        actual_length -= 9;
+
+     if(actual_length > sizeof(server_info)) {
+         pi_log(E_FATAL,"Server name too long.\n");
+@@ -1434,6 +1433,8 @@
+     current += dmap_add_int(current,"msdc",1);          /* 12 */
+
+     if(supports_update)
++        current += dmap_add_char(current,"msup",1);         /* 9 */
++    else
+         current += dmap_add_char(current,"msup",0);         /* 9 */
+
+     out_daap_output_start(pwsc,ppi,actual_length);
